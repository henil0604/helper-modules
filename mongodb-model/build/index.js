"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var MongoDbModel=function(){function MongoDbModel(model){_classCallCheck(this,MongoDbModel);this.model=model}_createClass(MongoDbModel,[{key:"create",value:async function create(){return await this.createOne.apply(this,arguments)}},{key:"createOne",value:async function createOne(data){var instance=new this.model(data);await instance.save();return instance}},{key:"createMany",value:async function createMany(data){var instances=await this.model.insertMany(data);return instances}},{key:"get",value:async function get(){return await this.getOne.apply(this,arguments)}},{key:"getMany",value:async function getMany(data){var instances=await this.model.findMany(data);return instances}},{key:"getOne",value:async function getOne(data){var instance=await this.model.findOne(data);return instance}},{key:"update",value:async function update(){return await this.updateOne.apply(this,arguments)}},{key:"updateMany",value:async function updateMany(find,update){var set=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(set===true){update={$set:update}}var instances=await this.model.updateMany(find,update);return instances}},{key:"updateOne",value:async function updateOne(find,update){var set=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(set===true){update={$set:update}}var instance=await this.model.updateOne(find,update);return instance}},{key:"delete",value:async function _delete(){return await this.deleteOne.apply(this,arguments)}},{key:"deleteMany",value:async function deleteMany(find){var instances=await this.model.deleteMany(find);return instances}},{key:"deleteOne",value:async function deleteOne(find){var instances=await this.model.deleteOne(find);return instances}},{key:"clear",value:async function clear(){var instances=await this.model.deleteMany();return instances}}]);return MongoDbModel}();module.exports=MongoDbModel;